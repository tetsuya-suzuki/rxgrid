#!/usr/bin/ruby
#
# NAME
#   loadavg
#
# SYNOPSIS:
#   From command line,
#
#     loadavg [<minutes>]
#
#   In batch files,
#
#     art <art_id> do
#       localPathName 'loadavg'
#     end
#
# DESCRIPTION
#   The 'loadavg' puts the value of the expression '<load_avg>*100+1' to standard output
#   where the <load_avg> is
#   * the load average over the last 1 minute if <minutes> is not given or <minutes> <= 1,
#   * the load average over the last 5 minutes if 1 < <minutes> <= 5, or
#   * the load average over the last 15 minutes otherwise.
#
#   For example, if the load average over the last 5 minutes is 0.28, the 'loadavg' prints '29'.
#
#     loadavg 5
#     29
#
#   In the following case, the job 'job1' in a batch file will be executed on an Xgrid agent
#   whose load average over the last 5 minutes is at most 0.50.
#
#     art 'load_average' do
#       localPathName 'loadavg'
#       arguments "5"
#     end
#
#     job 'job1' do
#       ...
#       ...
#       artConds ''load_average'=>{:max=>51}
#     end
#
# AUTHOR
#   Tetsuya SUZUKI <tetsuya[at]sic.shibaura-it.ac.jp> (Please replace '[at]' with '@')
#
#

cmd = "/usr/bin/uptime"
stdout = IO.popen(cmd)
stdout.sync = true
while line = stdout.gets
  line.chomp!
  if /load averages:\s+([^\s]*)\s+([^\s]*)\s+([^\s]*)/ =~ line
    loadAvgOver1min = $1
    loadAvgOver5min = $2
    loadAvgOver15min = $3
    break
  end
end
stdout.close

if ARGV.size == 0
  loadAvg = loadAvgOver1min
elsif ARGV[0].to_i <= 1
  loadAvg = loadAvgOver1min
elsif ARGV[0].to_i <= 5
  loadAvg = loadAvgOver5min
else
  loadAvg = loadAvgOver15min
end

puts (loadAvg.to_f*100+1).to_i

